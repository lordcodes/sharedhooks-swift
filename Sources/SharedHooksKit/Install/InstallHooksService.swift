// Copyright Â© 2022 Andrew Lord.

import Files

/// Service to install project git hooks into .git.
/// Handles non-SharedHooks hooks that are already found by backing them up and will also overwrite old SharedHooks hook files.
public struct InstallHooksService {
    /// Create the service.
    public init() {}

#warning("Add tests")
    /// Entry-point to run the service.
    /// - throws: `ExecutionError` when a fatal error has occurred and the command should fail.
    public func run() throws {
        printer.printMessage("ðŸ”¨ Installing project Git hooks")

        try installGitHooks()
    }

    private func installGitHooks() throws {
        let gitHooksDirectory = try handleFatalError {
            try Folder.current.gitHooks()
        }
        let projectHooksDirectory = try handleFatalError {
            try Folder.current.projectHooks()
        }

        for hook in gitHooks {
            if !projectHooksDirectory.containsSubfolder(named: hook) {
                continue
            }
            handleNonFatalError {
                try gitHooksDirectory
                    .resolveHookFile(hook)
                    .setupAsHookFile(hook)
            }
        }
    }
}

private extension Folder {
    func resolveHookFile(_ hook: String) throws -> File {
        if containsFile(named: hook) {
            try handleExistingHookFile(hook)
        }
        return try createNewHookFile(for: hook)
    }

    func handleExistingHookFile(_ hook: String) throws {
        guard let existingFile = try? file(named: hook) else {
            return
        }
        let hookContents = try readHookFileContents(hook: hook, file: existingFile)
        if hookContents.contains(File.autoGeneratedIdentifier) {
            try deleteExistingHookFile(hook: hook, file: existingFile)
        } else {
            try backupNoGeneratedHookFile(hook: hook, file: existingFile)
        }
    }

    func readHookFileContents(hook: String, file: File) throws -> String {
        do {
            return try file.readAsString()
        } catch is ReadError {
            throw SharedHooksError.resovingHookFile(hook: hook, reason: .readExistingHookFileContents)
        }
    }

    func deleteExistingHookFile(hook: String, file: File) throws {
        do {
            try file.delete()
        } catch is LocationError {
            throw SharedHooksError.resovingHookFile(hook: hook, reason: .deletingExisting)
        }
    }

    func backupNoGeneratedHookFile(hook: String, file: File) throws {
        do {
            try file.rename(to: "\(file.name).backup")
        } catch is LocationError {
            throw SharedHooksError.resovingHookFile(hook: hook, reason: .renamingBackup)
        }
    }

    func createNewHookFile(for hook: String) throws -> File {
        do {
            return try createFile(named: hook)
        } catch is WriteError {
            throw SharedHooksError.resovingHookFile(hook: hook, reason: .creatingNew)
        }
    }
}

private extension File {
    func setupAsHookFile(_ hook: String) throws {
        do {
            try write(hookTemplate)
            try append(File.autoGeneratedIdentifier)
            try setPermissions(
                owner: [.execute, .write, .read],
                group: [.execute, .write, .read],
                others: [.execute, .write, .read]
            )
        } catch is PermissionsError {
            throw SharedHooksError.settingPermissionsOnHookFile(hook: hook)
        } catch is WriteError {
            throw SharedHooksError.writingToHookFile(hook: hook)
        }
    }
}
